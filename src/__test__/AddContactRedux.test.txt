import React from "react";
import { render, fireEvent, waitFor, screen } from "@testing-library/react";
import "@testing-library/jest-dom";
import { Provider } from "react-redux";
import configureMockStore from "redux-mock-store";
import thunk from "redux-thunk";
import axios from "axios";
import AddContact from "../pages/AddContact";
import * as router from "react-router";
import { postCreateContact } from "../actions/ContactAction";
import { MemoryRouter } from "react-router-dom";
import { reduxForm, Field } from "redux-form";
import { createMemoryHistory } from "history";
// Tambahkan mock untuk window.matchMedia
window.matchMedia =
  window.matchMedia ||
  (() => ({
    matches: false,
    addListener: jest.fn(),
    removeListener: jest.fn(),
  }));

// Mock the axios module
// jest.mock("axios");

jest.mock("../actions/ContactAction");

const navigate = jest.fn();

beforeEach(() => {
  jest.spyOn(router, "useNavigate").mockImplementation(() => navigate);
});

const mockStore = configureMockStore([thunk]);

const validate = (values) => {
  const errors = {};
  if (!values.firstName) {
    errors.firstName = "First Name is required";
  }
  if (!values.lastName) {
    errors.lastName = "Last Name is required";
  }
  if (!values.age) {
    errors.age = "Age is required";
  }
  if (isNaN(Number(values.age))) {
    errors.age = "Age must be a number";
  }
  if (!values.photo) {
    errors.photo = "Url Photo is required";
  } else if (values.photo.length < 3) {
    errors.photo = "Minimum length is 3 characters";
  }
  // Tambahkan aturan validasi lainnya
  return errors;
};

const warn = (values) => {
  const warnings = {};
  if (values.photo && values.photo.length < 10) {
    warnings.photo = "The URL might be too short.";
  }
  // Tambahkan aturan peringatan lainnya jika diperlukan
  return warnings;
};
describe("AddContact Component", () => {
  let store;
  const initialState = {}; // Initial Redux state if needed
  const history = createMemoryHistory();
  beforeEach(() => {
    store = mockStore(initialState);
  });

  it("renders AddContact component", () => {
    render(
      <Provider store={store}>
        <AddContact />
      </Provider>
    );

    // Add your assertions here
  });

  it("calls handleBackClick when Back button is clicked", () => {
    render(
      <Provider store={store}>
        <AddContact />
      </Provider>
    );

    const backButton = screen.getByText("Back");

    fireEvent.click(backButton);

    expect(navigate).toHaveBeenCalledWith("/dashboard");
  });

  it("submits the form successfully", async () => {
    render(
      <Provider store={store}>
        <MemoryRouter>
          <AddContact />
        </MemoryRouter>
      </Provider>
    );

    // Simulate form input
    fireEvent.change(document.getElementById("firstName"), {
      target: { value: "John" },
    });
    fireEvent.change(document.getElementById("lastName"), {
      target: { value: "Doe" },
    });
    fireEvent.change(document.getElementById("age"), { target: { value: 25 } });
    fireEvent.change(document.getElementById("photo"), {
      target: { value: "https://example.com/photo.jpg" },
    });

    // Simulate form submission
    const submitButton = screen.getByText("Submit");
    fireEvent.click(submitButton);

    // Wait for the submission to complete and handle success
    // console.log("Before waitFor");
    await waitFor(
      () => {
        // console.log("Inside waitFor");
        // Debugging: Print the current DOM state
        // screen.debug();

        // Assert only when the message is present in the DOM
        if (screen.queryByText("Submit success!")) {
          expect(screen.getByText("Submit success!")).toBeInTheDocument();
        }
      },
      { timeout: 5000 } // Adjust the timeout as needed
    );
    // console.log("After waitFor");

    expect(postCreateContact).toHaveBeenCalled();
  });

  //   it("should validate and show warnings correctly", async () => {
  //     const ConnectedAddContact = reduxForm({
  //       form: "FormAddContact",
  //       validate,
  //       warn,
  //     })(AddContact);

  //     render(
  //       <Provider store={store}>
  //         <MemoryRouter>
  //           <ConnectedAddContact />
  //         </MemoryRouter>
  //       </Provider>
  //     );

  //     // Submit the form
  //     fireEvent.click(screen.getByText("Submit"));

  //     // Wait for validation errors to appear
  //     await waitFor(() => {
  //       expect(screen.getByText("First Name is required")).toBeInTheDocument();
  //       expect(screen.getByText("Last Name is required")).toBeInTheDocument();
  //       expect(screen.getByText("Age is required")).toBeInTheDocument();
  //       expect(screen.getByText("Url Photo is required")).toBeInTheDocument();
  //     });

  //     // Simulate form input
  //     // fireEvent.change(document.getElementById("age"), { target: { value: "short" } });

  //     // Wait for warning to appear
  //     // await waitFor(() => {
  //     //   expect(
  //     //     screen.getByText("The URL might be too short.")
  //     //   ).toBeInTheDocument();
  //     // });
  //   });

  //   it("handles form submission failure", async () => {
  //     // Mock postCreateContact to reject the Promise
  //     postCreateContact.mockRejectedValueOnce(new Error("Submission failed"));

  //     render(
  //       <Provider store={store}>
  //         <MemoryRouter>
  //           <AddContact />
  //         </MemoryRouter>
  //       </Provider>
  //     );

  //     // Simulate form input
  //     // fireEvent.change(document.getElementById("firstName"), {
  //     //   target: { value: "John" },
  //     // });
  //     // fireEvent.change(document.getElementById("lastName"), {
  //     //   target: { value: "Doe" },
  //     // });
  //     // fireEvent.change(document.getElementById("age"), { target: { value: 25 } });
  //     // fireEvent.change(document.getElementById("photo"), {
  //     //   target: { value: "https://example.com/photo.jpg" },
  //     // });

  //     // Simulate form submission
  //     const submitButton = screen.getByText("Submit");
  //     fireEvent.click(submitButton);

  //     // Wait for the submission to complete and handle failure
  //     await waitFor(() => {
  //       expect(screen.getByText("Submission failed")).toBeInTheDocument();
  //     });

  //     // Additional assertions
  //     expect(postCreateContact).toHaveBeenCalled();
  //     // ... other assertions
  //   });

  //   it("submits the form successfully", async () => {
  //     render(
  //       <Provider store={store}>
  //         <MemoryRouter>
  //           <AddContact />
  //         </MemoryRouter>
  //       </Provider>
  //     );

  //     // Simulate form input
  //     fireEvent.change(document.getElementById("firstName"), {
  //       target: { value: "John" },
  //     });
  //     fireEvent.change(document.getElementById("lastName"), {
  //       target: { value: "Doe" },
  //     });
  //     fireEvent.change(document.getElementById("age"), { target: { value: 25 } });
  //     fireEvent.change(document.getElementById("photo"), {
  //       target: { value: "https://example.com/photo.jpg" },
  //     });

  //     // Simulate form submission
  //     const submitButton = screen.getByText("Submit");
  //     fireEvent.click(submitButton);

  //     // Wait for the submission to complete and handle success
  //     await waitFor(() => {
  //       expect(screen.getByText("Submit success!")).toBeInTheDocument();
  //     });

  //     // Additional assertions
  //     expect(postCreateContact).toHaveBeenCalled();
  //     // ... other assertions
  //   });

  //   it("submits the form successfully", async () => {
  //     render(
  //       <Provider store={store}>
  //         <AddContact />
  //       </Provider>
  //     );

  //     // Simulate form input
  //     fireEvent.change(document.getElementById("firstName"), {
  //       target: { value: "John" },
  //     });
  //     fireEvent.change(document.getElementById("lastName"), {
  //       target: { value: "Doe" },
  //     });
  //     fireEvent.change(document.getElementById("age"), { target: { value: 25 } });
  //     fireEvent.change(document.getElementById("photo"), {
  //       target: { value: "https://example.com/photo.jpg" },
  //     });

  //     // Simulate form submission
  //     const submitButton = screen.getByText("Submit");
  //     fireEvent.click(submitButton);

  //     //Wait for the submission to complete and handle success
  //     console.log("Before waitFor");
  //     await waitFor(() => {
  //       console.log("Inside waitFor");
  //       expect(screen.getByText("Submit success!")).toBeInTheDocument();
  //     });
  //     console.log("After waitFor");
  //   });

  //   it("submits the form successfully", async () => {
  //     // Mock the axios post method
  //     axios.post.mockResolvedValueOnce({ data: "mocked data" });

  //     render(
  //       <Provider store={store}>
  //         <AddContact />
  //       </Provider>
  //     );

  //     // Simulate form input
  //     const firstNameInput = screen.getByLabelText(/First Name/i);
  //     fireEvent.change(firstNameInput, { target: { value: "John" } });

  //     const lastNameInput = screen.getByLabelText(/Last Name/i);
  //     fireEvent.change(lastNameInput, { target: { value: "Doe" } });

  //     const ageInput = screen.getByRole("spinbutton", { name: /Age/i });
  //     fireEvent.change(ageInput, { target: { value: 25 } });

  //     const urlPhotoInput = screen.getByLabelText(/Url Photo/i);
  //     fireEvent.change(urlPhotoInput, {
  //       target: { value: "https://example.com/photo.jpg" },
  //     });

  //     // Simulate form submission
  //     fireEvent.click(screen.getByText("Submit"));

  //     // Wait for asynchronous actions to complete (e.g., API call)
  //     await waitFor(() => {
  //       // Add your assertions here based on the expected behavior
  //     });
  //   });
});
